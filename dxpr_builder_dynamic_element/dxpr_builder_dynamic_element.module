<?php

/**
 * @file
 * Contains alterations to JavaScript libraries for the DXPR Builder module.
 */

use Drupal\Core\Extension\ModuleHandlerInterface;

/**
 * Implements hook_library_info_alter() to adjust JS libraries.
 *
 * This function modifies the JavaScript libraries defined by the DXPR Builder
 * module, setting specific weights and minification flags, and adjusts the 
 * insertion order for frontend scripts for optimal performance.
 */
function dxpr_builder_dynamic_element_library_info_alter(array &$libraries, $extension) {
  if ($extension === 'dxpr_builder') {
    $module_handler = \Drupal::service('module_handler');
    $jsPath = '/' . $module_handler->getModule('dxpr_builder_dynamic_element')->getPath() . '/js/';

    $additional_scripts = [
      'editor.builder' => [
        'dxpr_builder/dxpr_elements.js' => $jsPath . 'dynamic_element.js',
      ],
      'development' => [
        'dxpr_builder/dxpr_elements.js' => $jsPath . 'dynamic_element.js',
      ],
      'production' => [
        'dxpr_builder/dxpr_elements.js' => $jsPath . 'dynamic_element.min.js',
      ],
      'editor.frontend' => [
        'dxpr_builder/dxpr_frontend.min.js' => $jsPath . 'dynamic_element_frontend.js',
      ],
      'editor.frontend_dev' => [
        'dxpr_builder/dxpr_frontend.js' => $jsPath . 'dynamic_element_frontend.js',
      ],
    ];

    foreach ($additional_scripts as $library_key => $scripts) {
      if (isset($libraries[$library_key]['js'])) {
        foreach ($scripts as $original_key => $script_path) {
          if (array_key_exists($original_key, $libraries[$library_key]['js'])) {
            $original_key_index = array_search($original_key, array_keys($libraries[$library_key]['js']));
            $position = $original_key_index !== false ? $original_key_index : null;

            if ($position !== null) {
              $is_frontend = strpos($library_key, 'frontend') !== false;
              $weight = $is_frontend ? 0 : -4;
              $minified = strpos($script_path, '.min.js') !== false;

              // Determine the position adjustment based on frontend status.
              $adjustment = $is_frontend ? 0 : 1;

              $new_js = [
                $script_path => [
                  'weight' => $weight,
                  'minified' => $minified,
                ]
              ];

              // Merge arrays placing the new script before or after the original based on frontend status.
              $libraries[$library_key]['js'] = array_merge(
                array_slice($libraries[$library_key]['js'], 0, $position + $adjustment, true),
                $new_js,
                array_slice($libraries[$library_key]['js'], $position + $adjustment, null, true)
              );
            }
          }
        }
      }
    }
  }
}
